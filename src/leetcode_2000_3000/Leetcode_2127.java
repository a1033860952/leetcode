package leetcode_2000_3000;

public class Leetcode_2127 {


    public int maximumInvitations(int[] favorite) {

        //从 i 向 favorite[i]连边，可以得到一张有向图,注意i是i同学喜欢favorite[i]同学
        //通过这个可以画出一个有向图，比如i喜欢j，那么就可以画成i->j,如果相互喜欢那么就是i <-> j 双向箭头，可以自己画一画
        //接下来这段定义注意了，如果大小为 k 的连通块（图）， 有 k 个点和 k 条边，且由于每个点的出度均为1 ，那么这样的有向图就叫做“内向基环树“
        //k个点有k条边一定有环，因为如果没有环的话，一定是k-1条边，比如一条执行的图，不信的可以自己画一画看看

        //基环树又分为内向基环树和外向基环树，而基环树组成的森林就叫作基环树森林 (pseudoforest)
        //注意，我们知道基环树一定有环，但是这个环不一定能包含所有的顶点的，比如有10个顶点，只有三个是成环的，还剩下7个没有在环内，会在环外连接
        //说回内向基环树和外向基环树，「内向」是指树中任意节点有且只有一条出边，啥意思呢 ，用题目来说就是每个同学只能喜欢一个同学，不能喜欢多个
        //而外向基环树是指一个同学只能被另一个同学喜欢，不能被一个以上的同学喜欢
        //从题目来看，每位员工都有一位 喜欢 的员工，也就是说每个同学只能喜欢一个同学，那么就是内向基环树了

        //我们在用另一个说法来说明内向基环树，每一个内向基环树（连通块）都由一个基环（就是环）和其余指向基环的树枝组成
        //基环是可以两个节点就组成的，必须两个循环了，也是环嘛，
        //所以在这题中，环可以是两个或两个以上，所以要分为两种可能来讨论，也就是说这两类基环树在组成圆桌时会有明显区别

        //首先讨论环是两个以上节点组成的，也就是至少3个组成的环，那么我们仔细想一想，在环外面的树枝能加入这个环吗
        //注意题目，只有当喜欢的人在自己旁边时，才会坐下来，如果这个时候有人像进入这个圆环（圆桌）的时候，一定会破坏这个规则，让某个人不在自己喜欢的人旁边（不信的可以自己画图看看）
        //而且注意题目，k个点有k个边，所以一定只存在一个圆环，因为如果圆环的话，一定会有一个节点飘在整个图外面，和图没有任何联系，但是在此题中是不可能的
        //因为这个节点（同学）是会喜欢另一个（节点）同学的，他一定是有和其他节点有关系的
        //所以我们可以得出结论，如果基环是由2个以上的节点组成的，那么能组成的最大圆桌就是人数就是这个基环的节点数

        //分析完两个以上的圆环后，我们可以开始分析节点为两个的圆环，首先再次明确，此题根据提议只会存在一个环
        //此环中有两个节点，那么就反着找，比如先看第一个节点除了基环节点，还有那个节点喜欢第一个节点
        //然后一直反着找，看看找到最远的那个节点时，整条线上的节点数是多少，另一个节点也是一样的，以此类推，反着找
        //最后两个节点都找到自己最长线的长度，然后加起来，就是一个题目的答案了
        //注意可能有多个基环长度为2的基环树（？？  不确定 保持怀疑）
















        return 0;



    }
}
